- name: Criando o Sec Group
  local_action:
    module: ec2_group
    name: "{{ sec_group_name }}"
    description: SG giropops
    profile: "{{ profile }}"
    region: "{{ region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
      rule_desc: Acesso Remoto SSH
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0

- name: Criando as instancias EC2
  local_action:
    module: ec2
    group: "{{ sec_group_name }}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    profile: "{{ profile }}"
    wait: true
    region: "{{ region }}"
    key_name: "{{ key_name }}"
    count: "{{ count }}" 
  register: ec2

- name: debug
  debug:
    msg: var="{{ item.public_ip }}"
  loop:
  - "{{ ec2.instances|flatten(1) }}"

- name: Adicionando as instancias ao inventario temporário
  add_host:
    name: "{{ item.value.public_ip }}"
    groups: giropops-new
  loop:
  - "{{ lookup('dict', ec2.instances, wantList=True) }}"
  #- "{{ ec2.instances|flatten(levels=1) }}"

- name: Adicionando o IP público da instancia criada ao arquivo hosts
  local_action:
    module: lineinfile
    dest: "../../../hosts"
    regexp: "{{ item.public_ip }}"
    insertafter: "[kubernetes]"
    line: "{{ item.private_ip }}"
    loop:
    - "{{ ec2.instances|flatten(levels=1) }}" 

- name: Esperando o SSH
  local_action:
    module: wait_for
    host: "{{ item.public_ip }}"
    port: 22
    state: started
    loop:
    - "{{ ec2.instances|flatten(levels=1) }}" 

- name: Adicionando uma tag nas instancias
  local_action:
    module: ec2_tag
    resource: "{{ item.id }}"
    region: "{{ region }}"
    profile: "{{ profile }}"
    state: present
    loop:
    - "{{ ec2.instances|flatten(levels=1) }}" 
    args:
      tags:
        Name: ansible-{{ item.ami_launch_index|int + 1 }}
